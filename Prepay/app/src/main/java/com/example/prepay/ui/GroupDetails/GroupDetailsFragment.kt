package com.example.prepay.ui.GroupDetails

import android.Manifest
import android.app.AlertDialog
import android.content.Context.LOCATION_SERVICE
import android.content.Intent
import android.location.Address
import android.location.Geocoder
import android.location.Location
import android.location.LocationManager
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import android.view.LayoutInflater
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.view.View
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.core.content.res.ResourcesCompat
import androidx.core.graphics.drawable.toBitmap
import androidx.core.view.GravityCompat
import androidx.drawerlayout.widget.DrawerLayout
import androidx.fragment.app.activityViewModels
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.prepay.BaseFragment
import com.example.prepay.CommonUtils
import com.example.prepay.PermissionChecker
import com.example.prepay.R
import com.example.prepay.RetrofitUtil
import com.example.prepay.SharedPreferencesUtil
import com.example.prepay.data.model.dto.RestaurantData
import com.example.prepay.data.response.BanUserReq
import com.example.prepay.data.response.MoneyChangeReq
import com.example.prepay.data.response.PrivilegeUserReq
import com.example.prepay.data.response.TeamIdReq
import com.example.prepay.data.response.TeamIdStoreRes
import com.example.prepay.data.response.TeamUserRes
import com.example.prepay.databinding.DialogAuthoritySettingBinding
import com.example.prepay.databinding.DialogGroupExitBinding
import com.example.prepay.databinding.DialogGroupResignBinding
import com.example.prepay.databinding.DialogInviteCodeBinding
import com.example.prepay.databinding.DialogMoneyChangeBinding
import com.example.prepay.databinding.FragmentGroupDetailsBinding
import com.example.prepay.ui.MainActivity
import com.example.prepay.ui.MainActivityViewModel
import com.example.prepay.ui.RestaurantDetails.RestaurantDetailsViewModel
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationCallback
import com.google.android.gms.location.LocationRequest
import com.google.android.gms.location.LocationResult
import com.google.android.gms.location.LocationServices
import com.google.android.gms.maps.CameraUpdateFactory
import com.google.android.gms.maps.GoogleMap
import com.google.android.gms.maps.OnMapReadyCallback
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.BitmapDescriptorFactory
import com.google.android.gms.maps.model.LatLng
import com.google.android.gms.maps.model.Marker
import com.google.android.gms.maps.model.MarkerOptions
import com.google.android.material.navigation.NavigationView
import com.google.zxing.BarcodeFormat
import com.journeyapps.barcodescanner.BarcodeEncoder
import kotlinx.coroutines.launch
import java.io.IOException
import java.util.Locale
import java.util.Timer
import java.util.TimerTask

private const val TAG = "GroupDetailsFragment_Ïã∏Ìîº"
class GroupDetailsFragment: BaseFragment<FragmentGroupDetailsBinding>(
    FragmentGroupDetailsBinding::bind,
    R.layout.fragment_group_details
), RestaurantAdapter.OnRestaurantClickListener, OnTeamUserActionListener{
    private lateinit var mainActivity: MainActivity
    private lateinit var restaurantAdapter: RestaurantAdapter
    private lateinit var teamUserAdapter: TeamUserAdapter
    private lateinit var restaurantList: List<TeamIdStoreRes>
    private lateinit var teamTeamUserResList: List<TeamUserRes>
    private lateinit var drawerLayout: DrawerLayout
    private lateinit var navigationView: NavigationView
    private lateinit var currentLocation: Location
    //activityViewModel
    private val activityViewModel: MainActivityViewModel by activityViewModels()
    private val viewModel: GroupDetailsFragmentViewModel by viewModels()
    private val restaurantDetailsViewModel : RestaurantDetailsViewModel by viewModels()

    //GPSÍ¥ÄÎ†® Î≥ÄÏàò
    private var mMap: GoogleMap? = null
    private var currentMarker: Marker? = null
    private lateinit var mFusedLocationClient: FusedLocationProviderClient
    private var isUserLocationSet = false
    private var location = Location("dummy").apply {
        latitude = 36.107097
        longitude = 128.416369
    }

    /** permission check **/
    private val checker = PermissionChecker(this)
    private val runtimePermissions = arrayOf(
        Manifest.permission.ACCESS_FINE_LOCATION,
        Manifest.permission.ACCESS_COARSE_LOCATION
    )
    private var inviteCode = "0"


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mainActivity= context as MainActivity
        Log.d(TAG, activityViewModel.teamId.value.toString())
        setHasOptionsMenu(true)
    }

    override fun onStart() {
        super.onStart()

        if (checker.checkPermission(requireActivity(), runtimePermissions)) {
            startLocationUpdates()
        }
    }

    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {
        inflater.inflate(R.menu.menu_toolbar, menu) // Î©îÎâ¥ Ï∂îÍ∞Ä
        super.onCreateOptionsMenu(menu, inflater)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.ic_menu -> {
                if (binding.drawerLayout.isDrawerOpen(GravityCompat.END)) {
                    binding.drawerLayout.closeDrawer(GravityCompat.END) // üëâ Ïó¥Î†§ ÏûàÏúºÎ©¥ Îã´Í∏∞
                } else {
                    binding.drawerLayout.openDrawer(GravityCompat.END)  // üëâ Îã´ÌòÄ ÏûàÏúºÎ©¥ Ïó¥Í∏∞
                }
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onResume() {
        super.onResume()
        mainActivity.hideBottomNav(true)
    }

    override fun onStop() {
        super.onStop()
        mFusedLocationClient.removeLocationUpdates(locationCallback)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initEvent()
        initAdapter()
        initViewModel()
        initDrawerLayout()
        initialView()
        //GPS Í¥ÄÎ†® ÏΩîÎìú
        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(requireActivity())
        val mapFragment = childFragmentManager.findFragmentById(R.id.map) as SupportMapFragment
        mapFragment.getMapAsync(readyCallback)
    }

    override fun onPause() {
        super.onPause()
        mainActivity.hideBottomNav(false)
    }

    private fun initAdapter(){
        teamTeamUserResList = emptyList()
        restaurantList = emptyList()
        restaurantAdapter = RestaurantAdapter(restaurantList,this,location)
        teamUserAdapter = TeamUserAdapter(teamTeamUserResList,this, true)
        binding.recyclerView.layoutManager = LinearLayoutManager(requireContext())
        binding.recyclerView.adapter = restaurantAdapter
        binding.rvMemberList.layoutManager = LinearLayoutManager(requireContext())
        binding.rvMemberList.adapter = teamUserAdapter
    }

    private fun initViewModel(){
        viewModel.storeListInfo.observe(viewLifecycleOwner){ it->
            restaurantAdapter.teamIdStoreResList = it
            restaurantList = it
            if (mMap != null) {
                addStoreMarkers(it) // ÎßàÏª§ Ï∂îÍ∞Ä
            }
            restaurantAdapter.notifyDataSetChanged()
        }
        viewModel.teamUserListInfo.observe(viewLifecycleOwner){it->
            teamUserAdapter.teamUserResList = it
            teamUserAdapter.notifyDataSetChanged()
        }
        viewModel.userposition.observe(viewLifecycleOwner){it->
            teamUserAdapter.userposition = it
            teamUserAdapter.notifyDataSetChanged()
        }
        viewModel.getMyTeamRestaurantList(SharedPreferencesUtil.getAccessToken()!!,activityViewModel.teamId.value!!)
        viewModel.getMyTeamUserList(SharedPreferencesUtil.getAccessToken()!!,activityViewModel.teamId.value!!);

        viewModel.userLocation.observe(viewLifecycleOwner) { curlocation ->
            // ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä Î≥ÄÍ≤ΩÎê† ÎïåÎßàÎã§ Ìò∏Ï∂ú
            Log.d(TAG,"Î≥ÄÌôî"+curlocation.toString())
            restaurantAdapter.userLocation = curlocation
            restaurantAdapter.notifyDataSetChanged()
        }

        viewModel.moneyValue.observe(viewLifecycleOwner) { it->
            Log.d(TAG,"Í∞ÄÍ≤©Î≥ÄÎèô"+it.toString())
            //binding.usePossiblePriceTxt.text = it.toString()
            changeMoneyView()
        }
    }

    private fun initDrawerLayout(){
        drawerLayout = binding.drawerLayout
        navigationView = binding.navigationView
    }


    private fun initEvent() {
        binding.diningTogetherQrBtn.setOnClickListener {
            lifecycleScope.launch {
                runCatching {
                    RetrofitUtil.qrService.qrTeamCreate(SharedPreferencesUtil.getAccessToken()!!,activityViewModel.teamId.value!!.toInt())
                }.onSuccess {
                    Log.d(TAG,it.message)
                    showQRDialog(it.message)
                }.onFailure {
                    mainActivity.showToast("qrÎ∂àÎü¨Ïò§Í∏∞Í∞Ä Ïã§Ìå®ÌñàÏäµÎãàÎã§")
                }
            }
        }

        binding.groupInviteBtn.setOnClickListener {
            showInviteCodeInputDialog()
        }
        binding.groupExitBtn.setOnClickListener {
            showGroupExitDialog()
        }
        binding.addRestaurant.setOnClickListener {
            addRestaurantClick()
        }

        binding.moneyChangeBtn.setOnClickListener {
            showMoneyChangeDialog()
        }
        binding.qrBtn.setOnClickListener {
            lifecycleScope.launch {
                runCatching {
                    RetrofitUtil.qrService.qrPrivateCreate(SharedPreferencesUtil.getAccessToken()!!,activityViewModel.teamId.value!!.toInt())
                }.onSuccess {
                    Log.d(TAG,it.message)
                    showQRDialog(it.message+":"+SharedPreferencesUtil.getAccessToken()!!+":"+activityViewModel.teamId.value.toString())
                }.onFailure {
                    mainActivity.showToast("qrÎ∂àÎü¨Ïò§Í∏∞Í∞Ä Ïã§Ìå®ÌñàÏäµÎãàÎã§")
                }
            }
            //mainActivity.broadcast("hello","hello")
        }
    }

    fun changeMoneyView(){
        lifecycleScope.launch {
            kotlin.runCatching {
                RetrofitUtil.teamService.getTeamDetails(SharedPreferencesUtil.getAccessToken()!!, activityViewModel.teamId.value!!)
            }.onSuccess {
                Log.d(TAG,"ÏñºÎßà ÏÇ¨Ïö©"+it.dailyPriceLimit+" "+it.usedAmount)
                binding.usePossiblePriceTxt.text = CommonUtils.makeComma(viewModel.moneyValue.value!!.toInt() - it.usedAmount)
                viewModel.updatePosition(it.position)
                inviteCode = (it.teamPassword ?: "Ï¥àÎåÄÏΩîÎìúÏóÜÏùå").toString()
            }.onFailure {
                Log.d(TAG, "ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®")
            }
        }
    }



    fun initialView(){
        lifecycleScope.launch{
            kotlin.runCatching {
                RetrofitUtil.teamService.getTeamDetails(SharedPreferencesUtil.getAccessToken()!!,activityViewModel.teamId.value!!)
            }.onSuccess {
                binding.usePossiblePriceTxt.text = CommonUtils.makeComma(it.dailyPriceLimit-it.usedAmount)
                viewModel.updatePosition(it.position)
                inviteCode = (it.teamPassword ?: "Ï¥àÎåÄÏΩîÎìúÏóÜÏùå").toString()
            }.onFailure {
                Log.d(TAG,"Ïã§Ìå®ÌïòÏòÄÏäµÎãàÎã§")
            }
        }
    }

    //ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏ Îì± ÏßëÌï©
    private fun addRestaurantClick() {
        bringStoreId()
    }

    private fun bringStoreId() {
        mainActivity.changeFragmentMain(CommonUtils.MainFragmentName.ADD_RESTAURANT_FRAGMENT)
    }

    override fun onRestaurantClick(storeName : String, teamIdStoreResId: Int) {
        Log.d(TAG, "teamIdStoreResId: $teamIdStoreResId")
        activityViewModel.setStoreId(teamIdStoreResId)
        activityViewModel.setStoreName(storeName)
        Log.d(TAG, "storeName: $storeName")
        val restaurantData = RestaurantData(storeName, teamIdStoreResId)
        restaurantDetailsViewModel.setRestaurantData(restaurantData)
        mainActivity.changeFragmentMain(CommonUtils.MainFragmentName.RESTAURANT_DETAILS_FRAGMENT)
    }

    override fun onManageClick(teamUserRes: TeamUserRes) {
        showAuthoritySettingDialog(teamUserRes)
    }

    override fun onResignClick(teamUserRes: TeamUserRes) {
        showGroupResignDialog(teamUserRes)
    }

    /**
     * QR ÏΩîÎìúÎ•º ÏÉùÏÑ±ÌïòÏó¨ Îã§Ïù¥ÏñºÎ°úÍ∑∏Î°ú ÌëúÏãúÌïòÎäî Ìï®Ïàò
     *
     * @param context Îã§Ïù¥ÏñºÎ°úÍ∑∏Î•º ÌëúÏãúÌï† Ïª®ÌÖçÏä§Ìä∏ (Fragment ÎÇ¥ÏóêÏÑúÎäî requireContext()Î•º ÏÇ¨Ïö©)
     * @param url QR ÏΩîÎìúÏóê Ïù∏ÏΩîÎî©Ìï† URL (Í∏∞Î≥∏Í∞í: "https://www.naver.com")
     */
    fun showQRDialog(url: String = "https://www.naver.com") {
        val context = this@GroupDetailsFragment.requireContext()

        // ÌÉÄÏù¥Î®∏ ÏÉùÏÑ±
        val timer = Timer()

        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Î†àÏù¥ÏïÑÏõÉ Ïù∏ÌîåÎ†àÏù¥Ìä∏
        val dialogView = LayoutInflater.from(context).inflate(R.layout.dialog_create_qr, null)

        // QR ÏΩîÎìú ÏÉùÏÑ± Î∞è Ïù¥ÎØ∏ÏßÄÎ∑∞Ïóê Ï†ÅÏö©
        try {
            val barcodeEncoder = BarcodeEncoder()
            val bitmap = barcodeEncoder.encodeBitmap(url, BarcodeFormat.QR_CODE, 400, 400)
            val imageViewQrCode = dialogView.findViewById<ImageView>(R.id.imageViewQrCode)
            imageViewQrCode.setImageBitmap(bitmap)
        } catch (e: Exception) {
            Log.e("QRDialog", "QR ÏΩîÎìú ÏÉùÏÑ± Ïã§Ìå®", e)
        }

        // AlertDialog ÏÉùÏÑ±
        val dialog = androidx.appcompat.app.AlertDialog.Builder(context)
            .setView(dialogView)
            .setCancelable(true)  // Îí§Î°ú Í∞ÄÍ∏∞ Î≤ÑÌäº ÌóàÏö©
            .create()


        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ Îã´Ìûê Îïå ÌÉÄÏù¥Î®∏ Ï∑®ÏÜå
        dialog.setOnDismissListener {
            timer.cancel()
            initialView()
        }

        // Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌëúÏãú
        dialog.show()

        // 60Ï¥à Ïπ¥Ïö¥Ìä∏Îã§Ïö¥ ÌÉÄÏù¥Î®∏ ÏãúÏûë
        var seconds = 60
        val qrTimer = dialogView.findViewById<TextView>(R.id.qr_timer)
        qrTimer?.text = "ÎÇ®ÏùÄ ÏãúÍ∞Ñ: 60Ï¥à"

        timer.scheduleAtFixedRate(object : TimerTask() {
            override fun run() {
                seconds--
                // UI ÏóÖÎç∞Ïù¥Ìä∏Îäî Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÏàòÌñâ
                this@GroupDetailsFragment.requireActivity().runOnUiThread {
                    qrTimer?.text = "ÎÇ®ÏùÄ ÏãúÍ∞Ñ: ${seconds}Ï¥à"
                }
                if (seconds <= 0) {
                    // ÏãúÍ∞ÑÏù¥ Îã§ ÎêòÏóàÏúºÎ©¥ Îã§Ïù¥ÏñºÎ°úÍ∑∏Î•º Îã´Í≥† ÌÉÄÏù¥Î®∏ Ï∑®ÏÜå
                    this@GroupDetailsFragment.requireActivity().runOnUiThread {
                        if (dialog.isShowing) {
                            dialog.dismiss()
                        }
                    }
                    timer.cancel()
                    initialView()
                }
            }
        }, 1000, 1000)
    }

    //Îã§Ïù¥ÏñºÎ°úÍ∑∏ Î≥¥Ïó¨Ï£ºÎäî Î∂ÄÎ∂Ñ
    private fun showInviteCodeInputDialog() {
        val binding = DialogInviteCodeBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(binding.root)
            .create()
        Log.d(TAG,"Ï¥àÎåÄÏΩîÎìú"+inviteCode)
        binding.etInviteCode.text = inviteCode
        binding.inviteCodeConfirmBtn.setOnClickListener {
            dialog.dismiss()
        }
        dialog.show()
    }

    private fun showGroupExitDialog() {
        val binding = DialogGroupExitBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(binding.root)
            .create()
        binding.groupExitConfirmBtn.setOnClickListener {
            val tr = TeamIdReq(teamId = activityViewModel.teamId.value!!.toInt())
            exitTeam(tr)
            mainActivity.changeFragmentMain(CommonUtils.MainFragmentName.MYPAGE_FRAGMENT)
            dialog.dismiss()
        }

        binding.groupExitCancelBtn.setOnClickListener {
            dialog.dismiss()
        }
        dialog.show()
    }


    private fun showMoneyChangeDialog() {
        val binding = DialogMoneyChangeBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(binding.root)
            .create()
        binding.btnRegister.setOnClickListener {
            val moneyInput = binding.etCodeInput.text.toString()
            val moneyValue = if (moneyInput.isEmpty()) {
                10000
            } else {
                moneyInput.toInt()
            }
            val moneychange = MoneyChangeReq(moneyValue,activityViewModel.teamId.value!!.toInt())
            moneyChange(moneychange)
            viewModel.setMoneyValue(moneychange.dailyPriceLimit)
            dialog.dismiss()
        }
        binding.btnCancel.setOnClickListener {
            dialog.dismiss()
        }
        dialog.show()
    }

    private fun showGroupResignDialog(ban: TeamUserRes) {
        val binding = DialogGroupResignBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(binding.root)
            .create()
        binding.groupResignConfirmBtn.setOnClickListener {
            val banUser = BanUserReq(ban.email,ban.teamId)
            viewModel.TeamResign(SharedPreferencesUtil.getAccessToken()!!,banUser)
            dialog.dismiss()
        }

        binding.groupResignCancelBtn.setOnClickListener {
            dialog.dismiss()
        }
        dialog.show()
    }

    private fun showAuthoritySettingDialog(privilege : TeamUserRes) {
        val binding = DialogAuthoritySettingBinding.inflate(layoutInflater)

        val dialog = AlertDialog.Builder(requireContext())
            .setView(binding.root)
            .create()
        binding.autoritySettingConfirmBtn.setOnClickListener {
            val pr = PrivilegeUserReq(privilege.email,true,privilege.teamId)
            privilegeUser(pr)
            showToast(privilege.nickname+"ÎãòÏóêÍ≤å Í∂åÌïúÏùÑ Î∂ÄÏó¨ÌïòÏòÄÏäµÎãàÎã§.")
            dialog.dismiss()
        }

        binding.autoritySettingCancelBtn.setOnClickListener {
            dialog.dismiss()
        }
        dialog.show()
    }

    fun moneyChange(moneychange: MoneyChangeReq){
        lifecycleScope.launch {
            runCatching {
                RetrofitUtil.teamService.moneyChange(SharedPreferencesUtil.getAccessToken()!!,moneychange)
            }.onSuccess {

            }.onFailure {

            }
        }
    }

    fun privilegeUser(pr:PrivilegeUserReq){
        lifecycleScope.launch {
            runCatching {
              RetrofitUtil.teamService.privilegeUser(SharedPreferencesUtil.getAccessToken()!!,pr)
            }.onSuccess {

            }.onFailure {

            }
        }
    }

    fun exitTeam(tr: TeamIdReq){
        lifecycleScope.launch {
            runCatching {
                RetrofitUtil.teamService.exitTeam(SharedPreferencesUtil.getAccessToken()!!,tr)
            }.onSuccess {

            }.onFailure {

            }
        }
    }

    //GPS Í¥ÄÎ†® ÏΩîÎìúÎ∂ÄÎ∂Ñ
    private fun addStoreMarkers(stores: List<TeamIdStoreRes>) {
        mMap!!.clear()  // Í∏∞Ï°¥ ÎßàÏª§ ÏÇ≠Ï†ú

        for (store in stores) {
            val storeLocation = LatLng(store.latitude, store.longitude)

            val markerOptions = MarkerOptions().apply {
                position(storeLocation)
                title(store.storeName)
                snippet("ÏúÑÎèÑ: ${store.latitude}, Í≤ΩÎèÑ: ${store.longitude}")
            }
            mMap!!.addMarker(markerOptions)
        }

        // Ï≤´ Î≤àÏß∏ ÏÉÅÏ†ê ÏúÑÏπòÎ°ú Ïπ¥Î©îÎùº Ïù¥Îèô
        if (stores.isNotEmpty()) {
            val firstStoreLocation = LatLng(stores[0].latitude, stores[0].longitude)
            val cameraUpdate = CameraUpdateFactory.newLatLngZoom(firstStoreLocation, 15f)
            mMap!!.animateCamera(cameraUpdate)
        }
    }

    private val readyCallback: OnMapReadyCallback by lazy{
        object: OnMapReadyCallback {
            override fun onMapReady(p0: GoogleMap) {
                mMap = p0

                //ÌçºÎØ∏ÏÖò ÏöîÏ≤≠ ÎåÄÌôîÏÉÅÏûê (Í∂åÌïúÏù¥ ÏóÜÏùÑÎïå) & Ïã§Ìñâ Ïãú Ï¥àÍ∏∞ ÏúÑÏπòÎ•º ÏÑúÏö∏ Ï§ëÏã¨Î∂ÄÎ°ú Ïù¥Îèô
                setDefaultLocation()

                /** permission check **/
                if (!checker.checkPermission(requireActivity(), runtimePermissions)) {
                    checker.setOnGrantedListener {
                        //ÌçºÎØ∏ÏÖò ÌöçÎìù ÏÑ±Í≥µÏùºÎïå
                        startLocationUpdates()
                    }
                    checker.requestPermissionLauncher.launch(runtimePermissions)
                } else { //Ïù¥ÎØ∏ Ï†ÑÏ≤¥ Í∂åÌïúÏù¥ ÏûàÎäî Í≤ΩÏö∞
                    startLocationUpdates()
                }
                viewModel.storeListInfo.value?.let { addStoreMarkers(it) }
            }
        }
    }

    private fun startLocationUpdates() {
        // ÏúÑÏπòÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä check
        if (!checkLocationServicesStatus()) {
            showDialogForLocationServiceSetting()
        } else {
            if (checker.checkPermission(requireActivity(), runtimePermissions)) {
                mMap?.isMyLocationEnabled = true
                mMap?.uiSettings?.isZoomControlsEnabled = true
                mFusedLocationClient.requestLocationUpdates(locationRequest, locationCallback,null)
            }
        }
    }

    private val locationRequest: LocationRequest by lazy{
        LocationRequest.create().apply {
            interval = 1000   // 1Ï¥à
            fastestInterval = 500  // 0.5Ï¥à
            smallestDisplacement = 10.0f   //10m
        }
    }

    //ÏúÑÏπòÏ†ïÎ≥¥ ÏöîÏ≤≠Ïãú Ìò∏Ï∂ú
    var locationCallback: LocationCallback = object : LocationCallback() {
        override fun onLocationResult(locationResult: LocationResult) {
            super.onLocationResult(locationResult)
            val locationList = locationResult.locations
            if (locationList.size > 0) {
                val location = locationList[locationList.size - 1]
                if(!isUserLocationSet){
                    //Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä
                    isUserLocationSet = true
                    viewModel.updateLocation(location)
                }
                Log.d(TAG,"ÏãúÏûë"+location.toString())
                //ÌòÑÏû¨ ÏúÑÏπòÏóê ÎßàÏª§ ÏÉùÏÑ±ÌïòÍ≥† Ïù¥Îèô
                setCurrentLocation(location)
            }
        }
    }

    fun setCurrentLocation(location: Location){
        val markerTitle: String = getCurrentAddress(location)
        val markerSnippet = "ÏúÑÎèÑ: ${location.latitude.toString()}, Í≤ΩÎèÑ: ${location.longitude }"
        //ÌòÑÏû¨ ÏúÑÏπòÏóê ÎßàÏª§ ÏÉùÏÑ±ÌïòÍ≥† Ïù¥Îèô
        setCurrentLocation(location, markerTitle, markerSnippet)
    }

    fun setCurrentLocation(location: Location, markerTitle: String?, markerSnippet: String?) {
        currentMarker?.remove()

        // Ï≤´ Î≤àÏß∏ ÎßàÏª§ ÏúÑÏπò
        val currentLatLng1 = LatLng(location.latitude + 0.002, location.longitude + 0.002)
        val marker1 = ResourcesCompat.getDrawable(resources, R.drawable.logo, requireActivity().theme)?.toBitmap(150, 150)

        // ÎßàÏª§ ÏòµÏÖò 1
        val markerOptions1 = MarkerOptions().apply {
            position(currentLatLng1)
            title("Ïã∏ÌîºÎ≤ÖÏä§")
            snippet(markerSnippet)
            draggable(true)
            icon(BitmapDescriptorFactory.fromBitmap(marker1!!))
        }

        // Ï≤´ Î≤àÏß∏ ÎßàÏª§ Ï∂îÍ∞Ä
        mMap?.addMarker(markerOptions1)

        val cameraUpdate = CameraUpdateFactory.newLatLngZoom(currentLatLng1, 15f)
        mMap?.animateCamera(cameraUpdate)
    }

    fun getCurrentAddress(location: Location): String {
        //ÏßÄÏò§ÏΩîÎçî: GPSÎ•º Ï£ºÏÜåÎ°ú Î≥ÄÌôò
        val geocoder = Geocoder(requireActivity(), Locale.getDefault())
        val addresses: List<Address>?
        try {
            addresses = geocoder.getFromLocation(
                location.latitude,
                location.longitude,
                1
            )
        } catch (ioException: IOException) {
            //ÎÑ§Ìä∏ÏõåÌÅ¨ Î¨∏Ï†ú
            Toast.makeText(requireActivity(), "ÏßÄÏò§ÏΩîÎçî ÏÑúÎπÑÏä§ ÏÇ¨Ïö©Î∂àÍ∞Ä", Toast.LENGTH_LONG).show()
            return "ÏßÄÏò§ÏΩîÎçî ÏÇ¨Ïö©Î∂àÍ∞Ä"
        } catch (illegalArgumentException: IllegalArgumentException) {
            Toast.makeText(requireActivity(), "ÏûòÎ™ªÎêú GPS Ï¢åÌëú", Toast.LENGTH_LONG).show()
            return "ÏûòÎ™ªÎêú GPS Ï¢åÌëú"
        }

        return if (addresses == null || addresses.isEmpty()) {
            Toast.makeText(requireActivity(), "Ï£ºÏÜå Î∞úÍ≤¨ Î∂àÍ∞Ä", Toast.LENGTH_LONG).show()
            "Ï£ºÏÜå Î∞úÍ≤¨ Î∂àÍ∞Ä"
        } else {
            val address = addresses[0]
            address.getAddressLine(0).toString()
        }
    }

    private fun setDefaultLocation() {

        //Ï¥àÍ∏∞ ÏúÑÏπòÎ•º ÏÑúÏö∏Î°ú
        val location = Location("")
        location.latitude = 37.56
        location.longitude = 126.97

        val markerTitle = "ÏúÑÏπòÏ†ïÎ≥¥ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏùå"
        val markerSnippet = "ÏúÑÏπò ÌçºÎØ∏ÏÖòÍ≥º GPS ÌôúÏÑ± Ïó¨Î∂Ä ÌôïÏù∏ ÌïÑÏöî"

        if(checker.checkPermission(requireActivity(),runtimePermissions)){
            mFusedLocationClient.lastLocation.addOnSuccessListener {
                setCurrentLocation(it)
            }
        } else{
            setCurrentLocation(location,markerTitle,markerSnippet)
        }
    }

    /** Í∂åÌïú Í¥ÄÎ†® **/
    private fun checkLocationServicesStatus(): Boolean {
        val locationManager = requireActivity().getSystemService(LOCATION_SERVICE) as LocationManager
        return (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)
                || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER))
    }

    /******** ÏúÑÏπòÏÑúÎπÑÏä§ ÌôúÏÑ±Ìôî Ïó¨Î∂Ä check *********/
    private val GPS_ENABLE_REQUEST_CODE = 2001
    private var needRequest = false

    private fun showDialogForLocationServiceSetting() {
        val builder: androidx.appcompat.app.AlertDialog.Builder = androidx.appcompat.app.AlertDialog.Builder(requireActivity())
        builder.setTitle("ÏúÑÏπò ÏÑúÎπÑÏä§ ÎπÑÌôúÏÑ±Ìôî")
        builder.setMessage(
            "Ïï±ÏùÑ ÏÇ¨Ïö©ÌïòÍ∏∞ ÏúÑÌï¥ÏÑúÎäî ÏúÑÏπò ÏÑúÎπÑÏä§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§.\n"
        )
        builder.setCancelable(true)
        builder.setPositiveButton("ÏÑ§Ï†ï") { _, _ ->
            val callGPSSettingIntent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)
            startActivityForResult(callGPSSettingIntent, GPS_ENABLE_REQUEST_CODE)
        }
        builder.setNegativeButton("Ï∑®ÏÜå"
        ) { dialog, _ -> dialog.cancel() }
        builder.create().show()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        when (requestCode) {
            GPS_ENABLE_REQUEST_CODE ->
                //ÏÇ¨Ïö©ÏûêÍ∞Ä GPSÎ•º Ïº∞ÎäîÏßÄ Í≤ÄÏÇ¨Ìï®
                if (checkLocationServicesStatus()) {
                    needRequest = true
                    return
                }else{
                    Toast.makeText(requireActivity(),
                        "ÏúÑÏπò ÏÑúÎπÑÏä§Í∞Ä Í∫ºÏ†∏ ÏûàÏñ¥, ÌòÑÏû¨ ÏúÑÏπòÎ•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.",
                        Toast.LENGTH_SHORT).show()
                }
        }
    }
}

